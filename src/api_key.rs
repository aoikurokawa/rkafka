#[derive(Debug, Copy, Clone)]
#[repr(i16)]
pub enum ApiKey {
    Produce = 0,
    Fetch = 1,
    ListOffsets = 2,
    Metadata = 3,
    OffsetCommit = 8,
    OffsetFetch = 9,
    FindCoordinator = 10,
    JoinGroup = 11,
    Heartbeat = 12,
    LeaveGroup = 13,
    SyncGroup = 14,
    DescribeGroups = 15,
    ListGroups = 16,
    SaslHandshake = 17,
    ApiVersions = 18,
    CreateTopics = 19,
    DeleteTipics = 20,
    DeleteRecords = 21,
    InitProducerId = 22,
    OffsetForLeaderEpoch = 23,
    AddPartitionsToTxn = 24,
    AddOffsetsToTxn = 25,
    EndTxn = 26,
    WriteTxnMarkers = 27,
    TxnOffsetCommit = 28,
    DescribeAcls = 29,
    CreateAcls = 30,
    DeleteAcls = 31,
    DescribeConfigs = 32,
    AlterConfigs = 33,
    AlterReplicaLogDirs = 34,
    DescribeLogDirs = 35,
    SaslAuthenticate = 36,
    CreatePartitions = 37,
    CreateDelegationToken = 38,
    RenewDelegationToken = 39,
    ExpireDelegationToken = 40,
    DescribeDelegationToken = 41,
    DeleteGroups = 42,
    ElectLeaders = 43,
    IncrementalAlterConfigs = 44,
    AlterPartitionReassignments = 45,
    ListPartitionReassignments = 46,
    OffsetDelete = 47,
    DescribeClientQuotas = 48,
    AlterClientQuotas = 49,
    DescribeUserScramCredentials = 50,
    AlterUserScramCredentials = 51,
    DescribeQuorum = 55,
    UpdateFeatures = 57,
    DescribeCluster = 60,
    DescribeProducers = 61,
    UnregisterBroker = 64,
    DescribeTransactions = 65,
    ListTransactions = 66,
    ConsumerGroupHeartbeat = 68,
    ConsumerGroupDescribe = 69,
    GetTelemetrySubscriptions = 71,
    PushTelemetry = 72,
    ListConfigResources = 74,
    DescribeTopicPartitions = 75,
    ShareGroupHeartbeat = 76,
    ShareGroupDescribe = 77,
    ShareFetch = 78,
    ShareAcknowledge = 79,
    AddRaftVoter = 80,
    RemoveRaftVoter = 81,
    InitializeShareGroupState = 83,
    ReadShareGroupState = 84,
    WriteShareGroupState = 85,
    DeleteShareGroupState = 86,
    ReadShareGroupStateSummary = 87,
    DescribeShareGroupOffsets = 90,
    AlterShareGroupOffsets = 91,
    DeleteShareGroupOffsets = 92,
}

impl TryFrom<&[u8]> for ApiKey {
    type Error = String;

    fn try_from(value: &[u8]) -> Result<Self, Self::Error> {
        if value.len() < 2 {
            return Err("Size constraints not satisfied".to_string());
        }

        let request_api_key_raw = i16::from_be_bytes([value[0], value[1]]);
        match request_api_key_raw {
            0 => Ok(ApiKey::Produce),
            1 => Ok(ApiKey::Fetch),
            2 => Ok(ApiKey::ListOffsets),
            3 => Ok(ApiKey::Metadata),
            4 => Ok(ApiKey::OffsetCommit),
            9 => Ok(ApiKey::OffsetFetch),
            10 => Ok(ApiKey::FindCoordinator),
            11 => Ok(ApiKey::JoinGroup),
            12 => Ok(ApiKey::Heartbeat),
            13 => Ok(ApiKey::LeaveGroup),
            14 => Ok(ApiKey::SyncGroup),
            15 => Ok(ApiKey::DescribeGroups),
            16 => Ok(ApiKey::ListGroups),
            17 => Ok(ApiKey::SaslHandshake),
            18 => Ok(ApiKey::ApiVersions),
            19 => Ok(ApiKey::CreateTopics),
            20 => Ok(ApiKey::DeleteTipics),
            21 => Ok(ApiKey::DeleteRecords),
            22 => Ok(ApiKey::InitProducerId),
            23 => Ok(ApiKey::OffsetForLeaderEpoch),
            24 => Ok(ApiKey::AddPartitionsToTxn),
            25 => Ok(ApiKey::AddOffsetsToTxn),
            26 => Ok(ApiKey::EndTxn),
            27 => Ok(ApiKey::WriteTxnMarkers),
            28 => Ok(ApiKey::TxnOffsetCommit),
            29 => Ok(ApiKey::DescribeAcls),
            30 => Ok(ApiKey::CreateAcls),
            31 => Ok(ApiKey::DeleteAcls),
            32 => Ok(ApiKey::DescribeConfigs),
            33 => Ok(ApiKey::AlterConfigs),
            34 => Ok(ApiKey::AlterReplicaLogDirs),
            35 => Ok(ApiKey::DescribeLogDirs),
            36 => Ok(ApiKey::SaslAuthenticate),
            37 => Ok(ApiKey::CreatePartitions),
            38 => Ok(ApiKey::CreateDelegationToken),
            39 => Ok(ApiKey::RenewDelegationToken),
            40 => Ok(ApiKey::ExpireDelegationToken),
            41 => Ok(ApiKey::DescribeDelegationToken),
            42 => Ok(ApiKey::DeleteGroups),
            43 => Ok(ApiKey::ElectLeaders),
            44 => Ok(ApiKey::IncrementalAlterConfigs),
            45 => Ok(ApiKey::AlterPartitionReassignments),
            46 => Ok(ApiKey::ListPartitionReassignments),
            47 => Ok(ApiKey::OffsetDelete),
            48 => Ok(ApiKey::DescribeClientQuotas),
            49 => Ok(ApiKey::AlterClientQuotas),
            50 => Ok(ApiKey::DescribeUserScramCredentials),
            51 => Ok(ApiKey::AlterUserScramCredentials),
            55 => Ok(ApiKey::DescribeQuorum),
            57 => Ok(ApiKey::UpdateFeatures),
            60 => Ok(ApiKey::DescribeCluster),
            61 => Ok(ApiKey::DescribeProducers),
            64 => Ok(ApiKey::UnregisterBroker),
            65 => Ok(ApiKey::DescribeTransactions),
            66 => Ok(ApiKey::ListTransactions),
            68 => Ok(ApiKey::ConsumerGroupHeartbeat),
            69 => Ok(ApiKey::ConsumerGroupDescribe),
            71 => Ok(ApiKey::GetTelemetrySubscriptions),
            72 => Ok(ApiKey::PushTelemetry),
            74 => Ok(ApiKey::ListConfigResources),
            75 => Ok(ApiKey::DescribeTopicPartitions),
            76 => Ok(ApiKey::ShareGroupHeartbeat),
            77 => Ok(ApiKey::ShareGroupDescribe),
            78 => Ok(ApiKey::ShareFetch),
            79 => Ok(ApiKey::ShareAcknowledge),
            80 => Ok(ApiKey::AddRaftVoter),
            81 => Ok(ApiKey::RemoveRaftVoter),
            83 => Ok(ApiKey::InitializeShareGroupState),
            84 => Ok(ApiKey::ReadShareGroupState),
            85 => Ok(ApiKey::WriteShareGroupState),
            86 => Ok(ApiKey::DeleteShareGroupState),
            87 => Ok(ApiKey::ReadShareGroupStateSummary),
            90 => Ok(ApiKey::DescribeShareGroupOffsets),
            91 => Ok(ApiKey::AlterShareGroupOffsets),
            92 => Ok(ApiKey::DeleteShareGroupOffsets),
            _ => Err("Request API Key is wrong".to_string()),
        }
    }
}
